<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://cla7aye15i4nd.github.io</id>
    <title>dataisland&apos;s home</title>
    <updated>2021-10-29T06:21:43.198Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://cla7aye15i4nd.github.io"/>
    <link rel="self" href="https://cla7aye15i4nd.github.io/atom.xml"/>
    <subtitle>正因为生来一无所有，所以才能拥有一切，这是身为弱者的骄傲</subtitle>
    <logo>https://cla7aye15i4nd.github.io/images/avatar.png</logo>
    <icon>https://cla7aye15i4nd.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, dataisland&apos;s home</rights>
    <entry>
        <title type="html"><![CDATA[Re：从零开始的单片机生活（二）- STM32单片机程序的外设与模拟]]></title>
        <id>https://cla7aye15i4nd.github.io/post/re0-stm32-life-2/</id>
        <link href="https://cla7aye15i4nd.github.io/post/re0-stm32-life-2/">
        </link>
        <updated>2021-10-28T15:36:28.000Z</updated>
        <content type="html"><![CDATA[<p>还没开始写</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Re：从零开始的单片机生活（一）- STM32单片机程序的开发与加载]]></title>
        <id>https://cla7aye15i4nd.github.io/post/re0-stm32-life-1/</id>
        <link href="https://cla7aye15i4nd.github.io/post/re0-stm32-life-1/">
        </link>
        <updated>2021-10-28T13:40:32.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>本文章讲述了如何在STM32F11上开发一个简单的让LED灯闪烁的程序并讲解了单片机运行固件的具体流程。理论上来说，学习单片机的难度是严格小于学习操作系统和计算机体系结构这两门课程的难度。因为这两门课程探究的是现代计算机这样一个拥有优秀的性能以及丰富的功能的原理，包含了计算机发展历程中无数人的工作与智慧，我们需要的了解的包括但不限于：中断处理，线程调度，虚拟内存管理，文件系统，指令集，驱动。然而，在单片机中的内容则只是上述内容的一个子集，我们可以先只关注指令，内存以及中断，只要明白这三样事情，就足以理解单片机程序的开发和加载原理。在此之前，我们先来写第一个单片机程序。</p>
<h2 id="开发环境准备">开发环境准备</h2>
<ol>
<li>安装arm的交叉编译器，因为stm32f4系列的核心使用的都是cortex-m4的指令集，cortex-m4可以认为是arm的一个变种。编译器可以在<a href="https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads">ARM官方网站</a>下载到，可以选择直接下载已经编译好的二进制文件或者下载源码进行本地编译。</li>
<li>安装<a href="https://www.st.com/en/development-tools/stm32cubemx.html">STM32CubeMX</a>，这个工具的目的是为了帮我们自动生成一些初始化代码，如果没有这样的工具，开发单片机将会变成一件很麻烦的事情，后面会说明原因。</li>
<li>安装st-link，具体过程可以参见<a href="https://freeelectron.ro/installing-st-link-v2-to-flash-stm32-targets-on-linux/">这里</a>，这个工具的目的是将我们写好的程序烧录到板子上。</li>
</ol>
<h2 id="第一个led灯程序">第一个LED灯程序</h2>
<ol>
<li>我们打开STM32CubeMX，点击 File -&gt; New Project，选择我们自己板子的型号，这里我的板子是STM32F411RE。<br>
<img src="https://cla7aye15i4nd.github.io/post-images/1635430749676.png" alt="" loading="lazy"></li>
<li>然后点击Start Project，可以看到一块正方形的板子被一些带有字母数字的标签围着，选择带有PA5的标签，如果找不到可以用右下角的搜索框搜索，之后点击GPIO_Output。<br>
<img src="https://cla7aye15i4nd.github.io/post-images/1635431000254.png" alt="" loading="lazy"></li>
<li>最后点击Project Manager，选择项目保存的位置，ToolChain/IDE那一栏我们选择Makefile，因为我不打算使用定制的IDE，而是直接使用vscode这样的编辑器。</li>
<li>找到项目保存位置的Core/Src/main.c，在main函数最后可以看到一个<code>while</code>循环，在里面添加如下代码：</li>
</ol>
<pre><code class="language-c">while (1)
{
    /* USER CODE END WHILE */
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Toggle the state of pin PA5
    HAL_Delay(1000); //delay 1000ms
}
</code></pre>
<ol start="5">
<li>然后直接编译以及烧录:</li>
</ol>
<pre><code class="language-bash">make
st-flash --format=ihex write build/{your_project_name}.hex
</code></pre>
<ol start="6">
<li>最后点击板子上的reset键，我们就可以看到板子的LED灯开始闪烁了。</li>
</ol>
<h2 id="程序是如何运行的">程序是如何运行的</h2>
<h3 id="烧录程序">烧录程序</h3>
<p>要弄清楚这个问题，我们可以先研究一下STM32CubeMx为我们生成的Makefile，可以发现这个makefile首先为我们生成了elf，然后使用<code>objcopy</code>，用下面的命令生成可bin文件和hex文件，这样做的目的是去除elf中无用的头部以及符号表等信息。</p>
<pre><code class="language-bash">arm-none-eabi-objcopy -O ihex target/led.hex
arm-none-eabi-objcopy -O binary target/led.bin
</code></pre>
<p>这里需要插一句关于单片的内存的内容，单片机没有虚拟内存这回事，至少STM32F4是没有的。因此我们如果在程序使用指针，都是直接操作物理地址。因此任何时候提到地址，都是说的绝对的物理地址。<br>
回到这两个文件，hex文件指的是<a href="https://en.wikipedia.org/wiki/Intel_HEX">Intel Hex</a>，文件内容可以认为是一个个的形如(地址，数据)的二元组，告诉st-flash根据这些二元组将数据写入到对应单片机的地址上。而bin文件则只有数据，没有地址所以如果我们想烧录bin文件需要像下面这样指定要烧录的地址：</p>
<pre><code class="language-bash">st-flash write build/led.bin 0x8000000
</code></pre>
<p>这条命令是说让bin原模原样的覆盖0x8000000开始的地址的内容。了解了这两个文件后，我们可以认为烧录这一过程<strong>改变了单片的一部分内存数据</strong>，我们还需要关注寄存器是如何变化的。</p>
<h3 id="单片机重置reset">单片机重置(Reset)</h3>
<p>我们在烧录过后，还点击了单片上的Reset按钮，这一步单片及内部发生了什么呢。我们可以参考官方的Cortex-M4文档，在有关寄存器的章节，这里说了会将pc的值覆盖为地址0x00000004处的值。<br>
<img src="https://cla7aye15i4nd.github.io/post-images/1635434118723.png" alt="" loading="lazy"></p>
<p>但是问题是0x00000004处的值是什么呢，我们可以在STM32F411的文档中找到答案：<br>
<img src="https://cla7aye15i4nd.github.io/post-images/1635434260158.png" alt="" loading="lazy"><br>
简单来说，在通常情况下，单片机访问0x00000000 ~ 0x0007FFFF(这一段内存相当于访问Main Flash memory，而 Main Flash memory 正是在 0x8000000。因此这也意味着PC的值是0x8000004这个地址的值。</p>
<p>这里我们可以用ghidra逆向一下生成的led.elf文件，看看0x8000004处的内容是什么。<br>
<img src="https://cla7aye15i4nd.github.io/post-images/1635434743582.png" alt="" loading="lazy"><br>
可以很清楚的看到pc会被置成Reset_Handler的地址，我们可以在我们的代码中搜索Reset_Handler可以发现这是STM32CubeMX为我们生成的代码，它的作用是执行一些全局变量的初始化工作以及跳转到main函数，如果仔细看这这个函数，还是会发现不是特别简单，但是每个单片机程序都需要它，相当于一个模板一样的东西，每次都手动编写或者复制过来很麻烦，因此STMCubeMX就是在这样的地方发挥作用，让我们不需要去写那些重复的代码。</p>
<h3 id="led灯是如何闪烁的">LED灯是如何闪烁的</h3>
<p>到这一步程序已经开始执行main函数，但是它到底是通过什么是LED灯闪的呢？这一部分内容我们放到下一篇文章。</p>
]]></content>
    </entry>
</feed>